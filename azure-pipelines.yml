name: $(BuildID)

#
# Setup pipeline triggers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#triggers
#

# Enable Pull request validation triggers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pr-trigger
pr:
  #autoCancel: false # indicates whether additional pushes to a PR should cancel in-progress runs for the same PR.
  branches:
    include: # branch names which will trigger a build
      - stg
      - pro
    exclude: # branch names which will not trigger a build
      - master
      - base
      - dev
  paths:
    exclude: # file paths which will not trigger a build
    - README.md
    - LICENSE.md
    - docs/*
    - helpers/*
    - scripts/*
    - docker/*

# Enable Continuous integration (CI)
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#push-trigger
trigger:
  branches:
    include: # branch names which will trigger a build
      - base
      - stg
      - pro
    exclude: # branch names which will not trigger a build
      - master
      - dev
  paths:
    exclude: # file paths which will not trigger a build
    - README.md
    - LICENSE.md
    - docs/*
    - helpers/*
    - scripts/*
    - docker/*

#
# Setup pipeline environment
#

# Setup pipeline resources
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#resources
resources:
  containers:
  - container: gcloud
    image:  google/cloud-sdk:243.0.0-slim
  - container: gitopsci
    image:  raelga/gitopsci:v1.0

# Setup variable groups
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#variables
variables:
- group: gcloud-environment
  # The gcloud-environment contains:
  #   - GCLOUD_SERVICE_ACCOUNT: The Google Cloud Service Account (as secret)
  #   - GCLOUD_PROJECT_ID: The Google Cloud Project ID (as secret)
- name: env.provider
  value: gcp
- name: env.name
  value: $[ coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranchName']) ]
- name: env.prefix
  value: $[ format('pr{0}', variables['System.PullRequest.PullRequestNumber']) ]
# Paths
- name: env.paths.infra
  value: infra/$(env.provider)/deployments/$(env.name)
- name: env.paths.storage
  value: storage/$(env.name)
- name: env.paths.k8s
  value: k8s/overlays/$(env.name)

#
# Setup pipeline stages
#

stages:

- stage: Environment
  displayName: Environment
  jobs:

  - job: EnvPrint
    displayName: Check vars
    steps:
      - bash: |
          echo "Trigger information:"
          echo "  Reason          $(Build.Reason)"
          echo "  Environment     $(env.name)"
          echo "  Provider        $(env.provider)"
          echo "  Path Infra      $(env.paths.infra)"
          echo "  Path Storage    $(env.paths.storage)"
          echo "  Path K8S        $(env.paths.k8s)"
        displayName: Print trigger information

      - script: |
          echo "  Prefix          $(env.prefix)"
        displayName: Print prefix information
        condition: eq(variables['Build.Reason'], 'PullRequest')

  - job: GoogleCloudEnvCheck
    displayName: Check gcloud
    container: gcloud
    steps:

      - bash: |
          if which gcloud &> /dev/null;
          then
            echo "[i] gcloud installed with $(gcloud version | grep 'Google Cloud SDK').";
          else
            echo "[!] gcloud SDK is not installed."; exit 1;
          fi
        displayName: Check Google Cloud SDK version

      - bash: |
          if which gsutil &> /dev/null;
          then
            echo "[i] gsutil installed with $(gsutil version).";
          else
            echo "[!] gsutil is not installed."; exit 1;
          fi
        displayName: Check gsutil version

      - bash: |
          if test ! -z ${GCLOUD_SERVICE_ACCOUNT:-};
          then
            if gcloud auth activate-service-account \
                --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d);
            then
              echo "[i] Service account $(gcloud config get-value account) set.";
            else
              echo "[!] Unable to activate the service account.";
              exit 1;
            fi
          else
            echo "[!] GCLOUD_SERVICE_ACCOUNT environment variable must be set.";
            exit 1;
          fi
        displayName: Check Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - bash: |
          if test ! -z ${GCLOUD_PROJECT_ID:-};
          then
            echo "[i] GCLOUD_PROJECT_ID project set to ${GCLOUD_PROJECT_ID}.";
            if test ACTIVE == $(gcloud projects describe ${GCLOUD_PROJECT_ID} \
              --format="value(lifecycleState)"
            );
            then
            echo "[i] ${GCLOUD_PROJECT_ID} project is ACTIVE.";
            else
              echo "[!] ${GCLOUD_PROJECT_ID} status must be active.";
              exit 1;
            fi
          else
            echo "[!] GCLOUD_PROJECT_ID environment variable must be set.";
            exit 1;
          fi
        displayName: Check Google Cloud SDK project
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

  - job: gitopsciEnvCheck
    displayName: Check gitopsci
    container: gitopsci
    steps:

      - bash: |
          if which gcloud &> /dev/null;
          then
            echo "[i] gcloud installed with $(gcloud version | grep 'Google Cloud SDK').";
          else
            echo "[!] gcloud SDK is not installed."; exit 1;
          fi
        displayName: Check Google Cloud SDK version

      - bash: |
          if test ! -z ${GCLOUD_SERVICE_ACCOUNT:-};
          then
            if gcloud auth activate-service-account \
                --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d);
            then
              echo "[i] Service account $(gcloud config get-value account) set.";
            else
              echo "[!] Unable to activate the service account.";
              exit 1;
            fi
          else
            echo "[!] GCLOUD_SERVICE_ACCOUNT environment variable must be set.";
            exit 1;
          fi
        displayName: Check Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - bash: |
          if which kubectl &> /dev/null;
          then
            if test $(sed 's/.*Minor:"\([~0-9]\+\)".*/\1/' <(kubectl version --client=true 2>&1) ) -ge 14;
            then
              echo "[i] kubectl installed with $(kubectl version --client=true).";
            else
              echo "[!] kubectl minor version should be greather than 14."
            fi
          else
            echo "[!] kubectl is not installed."; exit 1;
          fi
        displayName: Check kubectl version

- stage: Infrastructure
  displayName: Infrastructure
  jobs:

  - job: InfrastructureDiff
    displayName: Preview changes
    container: gcloud
    steps:

      - script: >
          gcloud auth activate-service-account
          --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          gcloud config set project ${GCLOUD_PROJECT_ID}
        displayName: Activate Google Cloud SDK project
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - script: >
          echo '##vso[task.setvariable variable=PREFIX]$(env.prefix)'
        displayName: Set environment prefix if required
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - bash: |
          while read manifest;
          do

            deployment=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z "${PREFIX:-}" || deployment=${PREFIX}-${deployment};

            if test ! -z $(gcloud deployment-manager deployments list \
              --format="value(name)" --filter="name:${deployment}");
            then
              echo "[i] ${deployment} already exists."
              gcloud deployment-manager deployments describe ${deployment};
            else
              if gcloud deployment-manager deployments create ${deployment} \
                --config <(echo "resources:");
              then
                echo "[i] Empty deployment for ${deployment} created.";
              else
                echo "[!] Unable to create ${deployment} empty deployment.";
              fi
            fi

          done < <(find $(env.paths.infra) -name '*yaml');
        displayName: Checking deployment
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - bash: |
          while read manifest;
          do

            deployment=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z "${PREFIX:-}" || deployment=${PREFIX}-${deployment};

            echo "[i] Previewing deployment";
            echo "    Deployment  ${deployment}";
            echo "    Manifest    ${manifest}";
            echo "    Project     ${GCLOUD_PROJECT_ID}";

            gcloud deployment-manager deployments update ${deployment} \
              --config ${manifest} --preview \
              --create-policy CREATE_OR_ACQUIRE --delete-policy DELETE \
              || { "[!] Previewing of ${deployment} failed."; exit 1; }

              gcloud deployment-manager deployments cancel-preview ${deployment} \
                 > /dev/null \
                || { "[!] Preview cancel of ${deployment} failed."; exit 1; }

          done < <(find $(env.paths.infra) -name '*yaml');
        displayName: Preview changes with deployment manager
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

  - job: InfrastructureApply
    displayName: Apply changes
    container: gcloud
    dependsOn:
      - InfrastructureDiff
    steps:

      - script: >
          gcloud auth activate-service-account
          --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          gcloud config set project ${GCLOUD_PROJECT_ID}
        displayName: Activate Google Cloud SDK project
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - script: >
          echo '##vso[task.setvariable variable=PREFIX]$(env.prefix)'
        displayName: Set environment prefix if required
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - bash: |
          while read manifest;
          do

            deployment=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z "${PREFIX:-}" || deployment=${PREFIX}-${deployment};

            echo "Update:";
            echo "    Deployment  $deployment";
            echo "    Manifest    $manifest";
            echo "    Project     ${GCLOUD_PROJECT_ID}";

            gcloud deployment-manager deployments update ${deployment} \
              --config ${manifest} --preview \
              --create-policy CREATE_OR_ACQUIRE --delete-policy DELETE \
              || { "[!] Previewing of ${deployment} failed."; exit 1; }

            gcloud deployment-manager deployments update ${deployment} \
              --create-policy CREATE_OR_ACQUIRE --delete-policy DELETE \
                || { "[!] Update of ${deployment} failed."; exit 1; }

          done < <(find $(env.paths.infra) -name '*yaml');
        displayName: Apply changes with deployment manager
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

  - job: InfrastructureCleanup
    displayName: Clean up
    container: gcloud
    dependsOn:
      - InfrastructureDiff
      - InfrastructureApply
    condition: failed()
    steps:

      - script: >
          gcloud auth activate-service-account
          --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          gcloud config set project ${GCLOUD_PROJECT_ID}
        displayName: Activate Google Cloud SDK project
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - script: >
          echo '##vso[task.setvariable variable=PREFIX]$(env.prefix)'
        displayName: Set environment prefix if required
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - bash: |
          while read manifest;
          do

            deployment=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z "${PREFIX:-}" || deployment=${PREFIX}-${deployment};

            if test -n $(gcloud deployment-manager deployments list \
              --format="value(name)" --filter="name:${deployment}");
            then
              if test 0 -eq $(grep -c -- '- id:' \
                <(gcloud deployment-manager deployments \
                describe ${deployment} --format="yaml(resources[].id)"
              );
              then
                echo "Deleting empty deployment:";
                echo "    Deployment  $deployment";
                echo "    Manifest    $manifest";
                echo "    Project     ${GCLOUD_PROJECT_ID}";

                gcloud deployment-manager deployments delete \
                  ${deployment} --delete-policy ABANDON \
                  || { "[!] Delete of ${deployment} failed."; exit 1; }
              fi
            fi
          done < <(find $(env.paths.infra) -name '*yaml');
        displayName: Delete empty deployment manager deployments
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

- stage: Storage
  displayName: Storage
  jobs:

  - job: CheckStorage
    displayName: Check sources
    steps:

      - bash: |
          if test -d $(env.paths.storage);
          then
            echo "[i] $(env.paths.storage) folder found.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]true";
          else
            echo "[i] No storage folder found, skipping storage stage.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]false";
          fi
        name: storageFolder
        displayName: Check if the storage folder exists

      - bash: |
          STORAGE_SOURCES_COUNT=$( \
            find $(env.paths.storage) -maxdepth 1 -mindepth 1 -type d | wc -l
          );
          if test ${STORAGE_SOURCES_COUNT} -gt 0;
          then
            echo "[i] ${STORAGE_SOURCES_COUNT} storage sources found.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]true";
          else
            echo "[i] No storage sources found, skipping storage stage.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]false";
          fi
        name: storageSources
        condition: eq(variables['storageFolder.Exists'],'true')
        displayName: Check if there are storage source folders

  - job: UpdateStorage
    displayName: Update content
    container: gcloud
    dependsOn:
      - CheckStorage
    condition:
      and(
        eq(dependencies.CheckStorage.outputs['storageFolder.Exists'],'true'),
        eq(dependencies.CheckStorage.outputs['storageSources.Exists'],'true')
      )
    steps:

      - bash: |
          gcloud auth activate-service-account \
            --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          echo '##vso[task.setvariable variable=PREFIX]$(env.prefix)'
        displayName: Set environment prefix if required
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - bash: |
          while read bucket_src;
          do

            bucket=$(sed 's#.*/\([a-z]\+\)/\(.*\)$#\1-\2#' <<< ${bucket_src});
            test -z "${PREFIX}" || bucket=${PREFIX}-${bucket};

            if gsutil ls gs://$bucket;
            then
              echo "[i] $bucket exists."
            else
              echo "[i] $bucket doesn't exists or is not accesible.";
            fi
          done < <(find $(env.paths.storage) -maxdepth 1 -mindepth 1 -type d)
        displayName: Check if the buckets exists

      - bash: |
          while read bucket_src;
          do

            bucket=$(sed 's#.*/\([a-z]\+\)/\(.*\)$#\1-\2#' <<< ${bucket_src});
            test -z "${PREFIX}" || bucket=${PREFIX}-${bucket};

            if test -f ${bucket_src}/.ci/delete-extra-files;
            then
              echo "Sync deleting extra files not present in origin.";
              echo "  Source        ${bucket_src}";
              echo "  Destination   ${bucket}";
              gsutil rsync -R -J -C -c -d ${bucket_src}/ gs://${bucket}
            else
              echo "Sync without deleting extra files not present in remote."
              echo "  Source        ${bucket_src}";
              echo "  Destination   ${bucket}";
              gsutil rsync -R -J -C -c ${bucket_src}/ gs://${bucket}
            fi
          done < <(find $(env.paths.storage) -maxdepth 1 -mindepth 1 -type d)
        displayName: Update buckets contents

- stage: Kubernetes
  displayName: Kubernetes
  jobs:

  - job: CheckClusterManifests
    displayName: Check k8s manifests
    steps:

      - bash: |
          GKE_MANIFEST_COUNT=$( \
            egrep -l -o '^\s+- name.\s+cluster-name' $(env.paths.infra) | wc -l
          );
          if test ${GKE_MANIFEST_COUNT} -eq 0;
          then
            echo "[i] No cluster manifest found, skipping kubernetes stage.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]false";
          elif test ${GKE_MANIFEST_COUNT} -gt 1;
          then
            echo "[!] More than one cluster manifest found.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]false";
            exit 1;
          else
            echo "[i] Cluster manifest found.";
            echo "##vso[task.setvariable variable=Exists;isOutput=true]true"
          fi
        name: k8sManifest
        displayName: Check GKE infrastructure manifests


  - job: CheckCluster
    displayName: Check k8s cluster
    container: gcloud
    dependsOn: CheckClusterManifests
    condition: >
      eq(dependencies.CheckClusterManifests.outputs['k8sManifest.Exists'],'true')
    steps:

      - script: >
          gcloud auth activate-service-account
            --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          K8S_CLUSTER_LOCATION=$(
            sed -n 's/^cluster-location\s\+\(.*\)/\1/p'
            <(gcloud --project ${GCLOUD_PROJECT_ID} \
              deployment-manager deployments describe ${K8S_CLUSTER});
        displayName: Get GKE cluster location
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - bash: |
          if egrep -q '[a-z]+-[a-z]+[0-9]-[a-z]' <<<${K8S_CLUSTER_LOCATION};
          then
            GCLOUD_CLUSTER_LOCATION_FLAG="--zone ${K8S_CLUSTER_LOCATION}";
          else
            GCLOUD_CLUSTER_LOCATION_FLAG="--region ${K8S_CLUSTER_LOCATION}";
          fi
        displayName: Set GKE cluster location flag

      - bash:
          if gcloud --project ${GCLOUD_PROJECT_ID} \
              container clusters get-credentials ${K8S_CLUSTER} \
              ${GCLOUD_CLUSTER_LOCATION_FLAG};
          then
            echo "[i] kubectl cluster set to ${K8S_CLUSTER}.";
          else
            echo "[!] unable to retrieve cluster credentials.";
          fi
        displayName: Retrieve GKE cluster credentials

      - script: >
          echo kubectl get pods
